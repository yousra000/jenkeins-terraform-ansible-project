---
- name: Install and configure OpenJDK, Docker, and AWS CLI on Ubuntu
  hosts: ubuntu_servers
  become: yes
  gather_facts: yes

  vars:
    REGISTRY: "{{ REGISTRY }}"
    REPOSITORY: "{{ REPOSITORY }}"
    IMAGE_TAG: "{{ image_var | default('latest') }}"
    RDS_HOSTNAME: "{{ RDS_HOSTNAME }}"
    RDS_PASSWORD: "{{ RDS_PASSWORD }}"
    RDS_USERNAME: "{{ RDS_USERNAME }}"
    REDIS_HOSTNAME: "{{ REDIS_HOSTNAME }}"

  tasks:
    # Docker installation tasks
    - name: Install required system packages for Docker
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present

    - name: Add current user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: yes

    - name: Start and enable Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    # AWS CLI installation tasks
    - name: Install AWS CLI dependencies
      ansible.builtin.apt:
        name:
          - unzip
          - python3-pip
        state: present

    - name: Download AWS CLI v2
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip
        mode: '0755'

    - name: Unzip AWS CLI
      ansible.builtin.unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes

    - name: Install AWS CLI
      ansible.builtin.command: /tmp/aws/install
      args:
        creates: /usr/local/bin/aws


    - name: Clean up AWS CLI installation files
      ansible.builtin.file:
        path: /tmp/awscliv2.zip
        state: absent
      ignore_errors: yes

    - name: Clean up extracted AWS CLI files
      ansible.builtin.file:
        path: /tmp/aws
        state: absent
      ignore_errors: yes

    - name: Log in to AWS ECR using variables
      shell: |
        aws ecr get-login-password --region us-east-1 | \
        sudo docker login --username AWS --password-stdin {{ REGISTRY }}
      args:
        executable: /bin/bash
      register: ecr_login
      changed_when: "'Login Succeeded' in ecr_login.stdout"

    - name: Stop the container if it exists
      command: "sudo docker stop nodeapp"
      ignore_errors: yes
      register: stop_container
      changed_when: "'No such container' not in stop_container.stderr"

    - name: Remove the container if it exists
      command: "sudo docker rm nodeapp"
      ignore_errors: yes
      register: remove_container
      changed_when: "'No such container' not in remove_container.stderr"

    - name: Pull the latest image
      command: "sudo docker pull {{ REGISTRY }}/{{ REPOSITORY }}:{{ IMAGE_TAG }}"
      register: pull_result
      changed_when: "'Downloaded newer image' in pull_result.stdout"

    - name: Run the container
      command: >
        sudo docker run -d --name nodeapp -p 80:3000
        -e REDIS_HOSTNAME={{ REDIS_HOSTNAME }}
        -e REDIS_PORT=6379
        -e RDS_HOSTNAME={{ RDS_HOSTNAME }}
        -e RDS_USERNAME={{ RDS_USERNAME }}
        -e RDS_PASSWORD={{ RDS_PASSWORD }}
        -e RDS_PORT=3306
        {{ REGISTRY }}/{{ REPOSITORY }}:{{ IMAGE_TAG }}
      when: pull_result is changed or stop_container is changed or remove_container is changed